To answer your question, we will create a Python script that uses the `gffutils` library to query the database for the specified genes (XIST, MALAT1, BRCA1, NFKB1, COL1A2, HOTAIR, HOXC11, and HOXC12). The script will gather information about each transcript isoform, including chromosomal location, position, size, number of exons, average exon size, strand, and biotype. Finally, we will organize this information into a table and save it.

Here's how you can implement this:

```python
import gffutils
import pandas as pd

# Connect to the existing GFF/GTF database
db = gffutils.FeatureDB('your_database.db', keep_order=True)

# List of genes to query
genes_of_interest = ['XIST', 'MALAT1', 'BRCA1', 'NFKB1', 'COL1A2', 'HOTAIR', 'HOXC11', 'HOXC12']

# Prepare a list to collect transcript information
transcript_info = []

# Iterate over each gene of interest
for gene_name in genes_of_interest:
    # Fetch the gene feature
    gene = db.features_of_type('gene', filter={'gene_id': gene_name})
    
    for g in gene:
        # Fetch all transcripts associated with the gene
        transcripts = db.children(g.id, featuretype='transcript', order_by='start')
        
        for transcript in transcripts:
            # Initialize variables to calculate sizes and counts
            exon_sizes = []
            num_exons = 0
            
            # Fetch all exons associated with the transcript
            exons = db.children(transcript.id, featuretype='exon', order_by='start')
            for exon in exons:
                exon_size = exon.end - exon.start
                exon_sizes.append(exon_size)
                num_exons += 1
            
            # Calculate the total size of the transcript
            transcript_size = sum(exon_sizes)
            average_exon_size = transcript_size / num_exons if num_exons > 0 else 0
            
            # Collect transcript information
            transcript_info.append({
                'Gene': gene_name,
                'Chromosome': transcript.seqid,
                'Start': transcript.start,
                'End': transcript.end,
                'Size': transcript_size,
                'Number of Exons': num_exons,
                'Average Exon Size': average_exon_size,
                'Strand': transcript.strand,
                'Biotype': transcript.attributes.get('transcript_biotype', [''])[0]
            })

# Create a DataFrame from the collected information
transcript_df = pd.DataFrame(transcript_info)

# Save the DataFrame to a CSV file
transcript_df.to_csv('transcript_info.csv', index=False)

# Display the DataFrame
print(transcript_df)
```

### Explanation of the Code:

1. **Database Connection**: We connect to the SQLite database containing the genomic annotations using `gffutils.FeatureDB`.

2. **Gene List**: We define a list of genes of interest.

3. **Data Collection**: We loop through each gene, fetch its associated transcripts, and for each transcript, we gather information about its exons:
   - Calculate the size of each exon and keep track of the number of exons.
   - Calculate the total size of the transcript and the average exon size.

4. **Data Organization**: We store the collected information in a list of dictionaries.

5. **DataFrame Creation**: We convert the list of dictionaries into a Pandas DataFrame for easy manipulation and saving.

6. **Saving to CSV**: Finally, we save the DataFrame to a CSV file named `transcript_info.csv`.

### Note:
- Make sure to replace `'your_database.db'` with the actual path to your GFF/GTF database file.
- Ensure you have the `pandas` library installed in your Python environment to handle DataFrame operations. You can install it using `pip install pandas`.