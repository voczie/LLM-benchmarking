<think>
Okay, so I need to figure out how to print the names of the two genes right before and after the gene COL1A2 in a GFF/GTF database using SQLite. Let me think about this step by step.

First, I know that the database has a table called features which contains all the genomic features like genes, exons, etc. Each feature has an id, seqid (which is the chromosome), and start and end positions.

I need to find the gene COL1A2. So, I'll have to query the features table where the id is 'COL1A2'. Once I get that row, I can find its position in the database based on the chromosome order.

Wait, but how do I determine the order of genes on a chromosome? Because each gene has a start and end position. So, for COL1A2's chromosome, I need to list all the genes on it and sort them by their start positions. Then, find where COL1A2 fits in that sorted list.

Once I have the sorted list of genes on the same chromosome as COL1A2, I can look at the gene before and after COL1A2 in this list. But wait, what if there's only one gene? Or maybe no other genes nearby? Hmm, but the user is asking for two genes, so probably there are others.

So, here's a plan:

1. Find all features with 'COL1A2' as their id.
   - Check which of these are genes (featuretype = 'gene').
   - Since each gene has an id, and in GTF/GFF files, the same gene might have multiple ids if it's part of different isoforms or something else. But here, I think we're looking for the main gene.

2. Once found, get its chromosome (seqid).

3. Find all genes on that chromosome.
   - Query the features table where featuretype is 'gene' and seqid matches COL1A2's seqid.

4. Sort these genes by their start position to determine their order on the chromosome.

5. Locate the position of COL1A2 in this sorted list.

6. The gene immediately before it would be at index i-1, and the one after at i+1 (if they exist).

But wait, what if there are multiple entries for COL1A2? Like, maybe it's present as a parent and child relation or something else. So, I should probably take the first occurrence of COL1A2 in the features table.

Alternatively, perhaps each gene has only one id, so that's not an issue.

So, putting this into code:

- Use a SELECT statement to get all genes where id is 'COL1A2'.
   - If multiple entries, pick the first or handle accordingly.
- Get the chromosome from COL1A2.
- Query for all genes on that chromosome.
- Sort them by start position.
- Find the index of COL1A2 in this sorted list.
- Print the gene before and after.

Wait, but how do I get the chromosome? Because each feature has a seqid. So, for COL1A2's features, their seqid is the same as its chromosome.

So, code steps:

1. Query the features table where id = 'COL1A2' and featuretype = 'gene'.
   - This should give me one row (assuming it's a single gene).
   - Extract the seqid from this row; that's the chromosome.

2. Now, find all genes on that chromosome:
   - Select * from features where featuretype='gene' and seqid=col1a2_chromosome.
   - Get their ids and sort them based on start position.

3. Find the index of COL1A2 in this sorted list.

4. The gene before is at index i-1, after is i+1.

But wait, what if there are multiple genes with the same id? Probably not, but to be safe, maybe take the first occurrence.

Now, implementing this in Python using sqlite3:

I'll need to connect to the database, run these queries, and process the results.

Potential issues:

- What if COL1A2 is not found? Then the query would return nothing.
- What if there are no other genes on its chromosome?
   - The user wants two genes, so perhaps this case won't happen in their data.

So, code outline:

import sqlite3

conn = sqlite3.connect('genome.db')

# Step 1: Find COL1A2's chromosome
query = """
SELECT seqid FROM features WHERE id='COL1A2' AND featuretype='gene';
"""
col1a2_chromosome = None
rows = conn.execute(query).fetchall()
for row in rows:
    col1a2_chromosome = row[0]
    break  # assuming only one occurrence

# Step 2: Find all genes on that chromosome and sort them by start position
query = f"""
SELECT id, start FROM features 
WHERE featuretype='gene' AND seqid='{col1a2_chromosome}'
ORDER BY start;
"""
genes = conn.execute(query).fetchall()

# Convert to a list of dictionaries or just process as tuples
sorted_genes = [ (g[0], g[1]) for g in genes ]

# Step 3: Find the index of COL1A2 in sorted_genes
col1a2_index = None
for i, (id, start) in enumerate(sorted_genes):
    if id == 'COL1A2':
        col1a2_index = i
        break

if col1a2_index is not None:
    # Get the gene before and after
    prev_index = col1a2_index - 1
    next_index = col1a2_index + 1

    if prev_index >=0:
        prev_gene = sorted_genes[prev_index][0]
    else:
        prev_gene = None

    if next_index < len(sorted_genes):
        next_gene = sorted_genes[next_index][0]
    else:
        next_gene = None

    print(f"Gene before COL1A2: {prev_gene}")
    print(f"Gene after COL1A2: {next_gene}")

else:
    print("COL1A2 not found or no other genes nearby")

But wait, in the code above, I'm assuming that each gene has a unique id. What if there are multiple entries for COL1A2? Like, maybe it's present as a parent and child relation.

In that case, perhaps we should take the first occurrence of COL1A2 when querying all features where id='COL1A2'.

So, modifying step 1:

query = """
SELECT id, seqid FROM features 
WHERE id='COL1A2'
ORDER BY seqid;  # To get the main gene first
"""
col1a2_row = None
rows = conn.execute(query).fetchall()
for row in rows:
    if row[0] == 'COL1A2':
        col1a2_seqid = row[1]
        break

This way, we're getting the main gene's chromosome.

Alternatively, perhaps it's better to get all features with id='COL1A2' and pick the first one as a gene.

But I think that in GTF/GFF files, each gene has only one id. So, maybe no issue.

Another thing: when sorting genes by start position, if two genes have the same start, their order might not matter much for this purpose.

Testing this code with sample data:

Suppose on chromosome 1, there are three genes:
- Gene A starts at 100
- COL1A2 starts at 200
- Gene B starts at 300

Then sorted_genes would be [Gene A, COL1A2, Gene B]. So the gene before is Gene A, after is Gene B.

Another case: if COL1A2 is first in the list, then there's no previous gene. Similarly, if it's last, no next gene.

But the user wants two genes, so perhaps their data ensures that there are at least two other genes nearby.

So, putting all together, this should work.
</think>

To find the names of the two genomic features immediately surrounding the gene COL1A2 on its chromosome using a GFF/GTF database in SQLite, follow these steps:

1. **Identify COL1A2's Chromosome**: Extract the chromosome (seqid) associated with the gene COL1A2.
2. **List All Genomic Features on the Same Chromosome**: Retrieve all genes present on the identified chromosome.
3. **Sort Genes by Start Position**: Order these genes based on their genomic start positions to determine their sequence order on the chromosome.
4. **Locate COL1A2 in the Sorted List**: Find its position within this sorted list.
5. **Identify Neighboring Genes**: The immediate predecessor and successor genes are then identified.

Here is a Python script that implements these steps:

```python
import sqlite3

# Connect to the database
conn = sqlite3.connect('genome.db')

# Step 1: Find COL1A2's chromosome
query = """
SELECT seqid FROM features 
WHERE id='COL1A2' AND featuretype='gene';
"""
col1a2_chromosome = None
rows = conn.execute(query).fetchall()
for row in rows:
    col1a2_chromosome = row[0]
    break  # Assuming only one occurrence

# If COL1A2 is not found, handle accordingly
if not col1a2_chromosome:
    print("Gene COL1A2 not found.")
    exit()

# Step 2: Find all genes on the same chromosome and sort them by start position
query = f"""
SELECT id, start FROM features 
WHERE featuretype='gene' AND seqid='{col1a2_chromosome}'
ORDER BY start;
"""
genes = conn.execute(query).fetchall()
sorted_genes = [(g[0], g[1]) for g in genes]

# Step 3: Find the index of COL1A2 in the sorted list
col1a2_index = None
for i, (id, _) in enumerate(sorted_genes):
    if id == 'COL1A2':
        col1a2_index = i
        break

if not col1a2_index:
    print("COL1A2 is not a gene or not found among the genes.")
    exit()

# Step 4: Determine neighboring genes
prev_index = col1a2_index - 1
next_index = col1a2_index + 1

prev_gene = None
if prev_index >= 0:
    prev_gene = sorted_genes[prev_index][0]

next_gene = None
if next_index < len(sorted_genes):
    next_gene = sorted_genes[next_index][0]

# Output the results
print(f"Gene before COL1A2: {prev_gene}")
print(f"Gene after COL1A2: {next_gene}")
```

This script efficiently locates the neighboring genomic features by leveraging SQL queries to fetch and sort data, ensuring accurate identification of the immediate surrounding genes.