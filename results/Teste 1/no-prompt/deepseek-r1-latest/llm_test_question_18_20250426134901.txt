<think>
Okay, so I need to help generate a stacked bar plot that shows the proportions of protein-coding, lncRNA, and miRNA genes for each chromosome. The data is stored in an SQLite database with a specific schema.

First, I should figure out which tables contain the necessary information. The features table seems relevant because it has fields like featuretype, which can be used to categorize the genes into protein-coding, lncRNA, or miRNA. It also has a seqid field that indicates the chromosome each gene is on.

I'll need to write an SQL query that selects the chromosome (seqid), and counts the number of each type of feature (featuretype) for each chromosome. Then, I can use these counts to calculate proportions.

So, my initial thought is to use a SELECT statement with COUNT functions grouped by seqid and featuretype. That should give me the count for each category per chromosome.

Next, since I need proportions, I'll have to normalize these counts. This means dividing each count by the total number of features on that chromosome. To get the totals, I can create another CTE (Common Table Expression) or use a subquery within my main query.

I think using a Common Table Expression would make it cleaner. So, first, I'll write a CTE that calculates the total number of features per chromosome by summing up all counts for each seqid.

Then, in the main SELECT statement, I'll join this CTE with the original counts and divide each featuretype count by the total to get the proportion.

I should also make sure to order the bars within each chromosome so that protein-coding comes first, followed by lncRNA, then miRNA. This can be done using the ORDER BY clause in the main query.

Once I have all the proportions calculated correctly, I'll need to visualize this data. Since the user wants a stacked bar plot, I'll use matplotlib in Python because it's widely used and has good support for such visualizations.

I'll import pandas to create a DataFrame from my SQL results. Then, I'll reshape the data so that each featuretype is a separate column within each chromosome row. This might involve using pivot tables or similar functions.

Finally, I'll use matplotlib's bar function with the stacked parameter set to True and specify labels for each category. I'll also add appropriate titles and labels for clarity.

I should test my SQL query first to ensure it returns the expected data without any errors. Then, check that the reshaping step works correctly before plotting. If there are chromosomes with zero counts in a category, I might need to handle those cases to avoid division by zero or negative proportions.

Overall, the steps are: write the SQL query to get counts and proportions, reshape the data for visualization, and then create the stacked bar plot using matplotlib.
</think>

To generate a stacked bar plot showing the proportions of protein-coding, lncRNA, and miRNA genes on each chromosome separately, follow these steps:

### Step 1: Write an SQL Query to Calculate Proportions
First, we need to calculate the counts for each feature type per chromosome and then compute their proportions.

```sql
WITH FeatureCounts AS (
    SELECT 
        seqid,
        COUNT(*) as total_features,
        COUNT('protein-coding') as protein_coding,
        COUNT('lncRNA') as lncRNA,
        COUNT('miRNA') as miRNA
    FROM 
        features
    GROUP BY
        seqid
)
SELECT 
    fseqid AS chromosome,
    (f.protein_coding / t.total_features) as protein_coding_prop,
    (f.lncRNA / t.total_features) as lncRNA_prop,
    (f.miRNA / t.total_features) as miRNA_prop
FROM 
    FeatureCounts f
CROSS JOIN 
    FeatureCounts t
WHERE 
    f.seqid = t.seqid;
```

### Step 2: Reshape the Data for Visualization
Convert the data into a format suitable for plotting.

```python
import pandas as pd

# Assuming 'df' is your DataFrame from the SQL query result
df = df.melt(id_vars=['chromosome'], 
             value_vars=['protein_coding_prop', 'lncRNA_prop', 'miRNA_prop'],
             var_name='category',
             value_name='proportion')

# Reshape to long format for stacked bars
df_long = df.pivot(index=['chromosome'], columns='category', values='proportion')
```

### Step 3: Create the Stacked Bar Plot Using Matplotlib

```python
import matplotlib.pyplot as plt
import numpy as np

# Prepare data
data = df_long.T

# Colors for each category
colors = {
    'protein_coding_prop': '#28a745',
    'lncRNA_prop': '#dc3545',
    'miRNA_prop': '#ef4444'
}

# Create the plot
ax = data.plot(kind='bar', stacked=True, color=colors.values(), rot=0)

# Customize the plot
plt.title('Proportions of Gene Types by Chromosome')
plt.xlabel('Chromosome')
plt.ylabel('Proportion')

# Add value annotations
for p in ax.patches:
    width = p.get_x() + p.get_width()/2.
    height = p.get_height()
    ax.text(width, height, f'{height:.3f}', ha='center', va='bottom')

# Show the plot
plt.show()
```

### Explanation

1. **SQL Query**:
   - The query first calculates total features per chromosome and counts for each feature type.
   - It then computes proportions by dividing each count by the total number of features on that chromosome.

2. **Data Reshaping**:
   - The data is reshaped from wide format (one row per feature type) to long format (each feature type in separate columns).

3. **Plotting**:
   - A stacked bar plot is created using Matplotlib, with each category (protein-coding, lncRNA, miRNA) assigned a distinct color.
   - Value annotations are added for clarity.

This approach provides a clear visualization of how each gene type proportionally contributes to each chromosome in your dataset.