<think>
Okay, so I need to figure out how many exons each transcript isoform of the BRCA1 gene has. The user wants me to print the transcript isoform names along with the number of exons. 

First, I remember that in GFF format, genes are annotated with features like exons, transcripts, etc. Each exon is a feature within a gene. So, for BRCA1, I should look into its associated transcripts and then check each exon within those transcripts.

I think the database has tables like 'features' which contains all the genomic annotations. The 'features' table includes an 'id', 'seqid', 'source', etc., but importantly, it also has a column called 'featuretype'. So I can query this table where featuretype is 'exon'.

But wait, each transcript isoform might have multiple exons. So for BRCA1, there could be several transcripts (like different mRNA versions), and each of those would have their own set of exons.

I need to get the gene ID first—BRCA1—to find all its associated transcripts. Then, for each transcript, I can count how many exons it has.

So my plan is:

1. Find all transcripts related to BRCA1.
2. For each transcript, count the number of exons.
3. Output the transcript name and the exon count.

I think using SQL joins would be necessary here. The 'features' table will give me the exons, but I'll need to join with other tables like 'relations' or maybe directly get the gene info from another table if available. Wait, looking back at the schema, there's no 'genes' table mentioned—only 'features', 'relations', etc. Hmm.

Wait, perhaps each transcript is associated through a relation table? Or maybe not. Since BRCA1 is a gene, its transcripts would be in the same database but under different tables. So I might need to find all features where featuretype is 'exon' and then see which ones belong to BRCA1's gene.

Alternatively, perhaps each exon has an associated transcript or gene. But without a 'genes' table, it's tricky. Maybe the 'features' table includes a 'gene_id' column? Wait, no—the schema provided doesn't have that. So I might need another approach.

Wait, maybe the 'features' table also contains information about genes through other columns like 'source' or perhaps via the 'id'. For example, if BRCA1 is an exon with id 'BRCA1', then all exons of BRCA1 would be under this id. But I'm not sure because in GFF format, each gene has multiple features (exons), and each feature can have its own id.

Wait, perhaps the 'features' table includes a column like 'gene_id'. Let me check: The schema provided doesn't include that. So maybe it's not present. That complicates things.

Alternatively, perhaps I can use the fact that each transcript is part of BRCA1 and then count exons per transcript. But without knowing which transcripts belong to BRCA1, this might be difficult.

Wait, perhaps in the 'features' table, there's a column like 'gene_id'. Let me check again: The schema provided doesn't include it. So maybe I need another approach.

Alternatively, perhaps each exon is part of a transcript, and the 'transcript_id' can be used to group exons by their isoform. But since the database schema doesn't have a 'transcript_id', this might not work either.

Hmm, this seems complicated. Maybe I should proceed with what's available in the schema.

Wait, perhaps each exon is part of a feature that belongs to a gene, and within that gene, there are multiple transcripts. So for BRCA1, I can find all exons where the parent or child relation points to it. But without knowing how the relations table works, this might be tricky.

Alternatively, maybe the 'features' table includes an 'id' which is unique per feature, and each exon has a 'featuretype' of 'exon'. So perhaps I can get all exons for BRCA1 by joining with other tables that link features to genes or transcripts.

Wait, without knowing how the relations table works, it's hard. Maybe the 'relations' table links parent and child features. For example, a gene (parent) might have exons (children). So perhaps I can find all children of BRCA1 by querying the 'relations' table where parent is BRCA1.

But wait, in GFF format, each exon is part of a transcript, which is part of a gene. So maybe relations would link exons to their transcripts and transcripts to genes. But without knowing the exact schema, it's hard to say.

Alternatively, perhaps I can get all features where featuretype is 'exon' and then group them by their parent or child relationship with BRCA1.

Wait, this is getting too complicated. Maybe a better approach is to first find all transcripts for BRCA1, then for each transcript, count the number of exons.

But without knowing how to get the transcripts, it's difficult. Alternatively, perhaps I can use the fact that each exon has an associated gene, and group by gene ID (BRCA1) and then count exons per transcript.

Wait, but again, without a 'gene_id' in features, this is tricky.

Alternatively, maybe the 'features' table includes a column like 'transcript_id', which would allow grouping exons by their isoform. But since the schema doesn't include that, perhaps it's not available.

Hmm, I'm stuck here. Maybe I should proceed with what's possible given the schema.

Wait, looking back at the user's question: they want to print the transcript isoform names and the number of exons. So maybe each transcript is a separate entity in the database, but without knowing how it's stored, perhaps using the 'features' table where featuretype is 'exon', and then group by some identifier that represents the transcript.

Alternatively, perhaps the 'extra' field can be used to store additional information like transcript IDs. So maybe each exon has an 'id' in the 'extra' field which includes the transcript name.

Wait, looking at the schema: The 'features' table has an 'extra' text column. Maybe this is where annotations are stored, including things like transcript IDs or names.

So perhaps for exons of BRCA1, their 'extra' fields include information about the transcript they belong to. So I can query all features where featuretype is 'exon', seqid is BRCA1, and then look at the 'extra' field to find the transcript name.

But wait, in GFF format, each exon's attributes are stored as a space-separated string of key=value pairs. So perhaps for exons, the 'attributes' field contains something like 'transcript_id="BRCA1-isoform1"' or similar.

So maybe I can write a query that selects all features where featuretype is 'exon', seqid is BRCA1, and then parse the attributes to find the transcript ID. Then group these exons by their transcript ID and count how many exons each has.

But this requires using a function to extract the transcript ID from the attributes field. In SQL, I can use something like REGEXPextract(attributes, '"([^"]+)"') to get the value inside quotes.

So perhaps the plan is:

1. Select all features where featuretype is 'exon' and seqid is BRCA1.
2. For each of these exons, extract the transcript ID from the attributes field.
3. Group these exons by their transcript ID.
4. Count the number of exons per group.

This would give me the count of exons per transcript isoform for BRCA1.

So putting this into a SQL query:

SELECT 
    REGEXPextract(attributes, '"([^"]+)"') as transcript_id,
    COUNT(*) as exon_count
FROM 
    features
WHERE 
    featuretype = 'exon' AND seqid = 'BRCA1'
GROUP BY 
    transcript_id
ORDER BY 
    transcript_id;

Wait, but in the schema, there's an 'extra' field. Maybe that's where the attributes are stored? Or is it 'attributes'? Looking back at the schema: The features table has 'attributes text', so I think 'attributes' is the correct column.

So perhaps the query should use 'attributes' instead of 'extra'.

Also, in GFF format, each feature can have multiple attributes. So using REGEXPextract on 'attributes' with '"([^"]+)"' would extract all possible transcript IDs if there are multiple (though that's unlikely).

But for simplicity, maybe just take the first one.

Alternatively, perhaps it's better to use a subquery or a Common Table Expression (CTE) to process this.

Wait, but in SQL, grouping by REGEXPextract(attributes, '"([^"]+)"') would group all exons with the same transcript ID together and count them.

So that should work.

But wait, what if there are multiple transcripts for BRCA1? Then each exon's attributes may have different transcript IDs. So this query will correctly group them.

Yes, I think this approach is correct.

Alternatively, perhaps using a join to get more information about the transcript, but without knowing how the relations table works, it might not be necessary.

So in conclusion, the SQL query would select the transcript ID from each exon's attributes, group by that ID, and count the number of exons per isoform.
</think>

To determine the number of exons for each transcript isoform of BRCA1, we can use a SQL query to analyze the features table. Here's how:

### Solution Code
```sql
SELECT 
    REGEXPextract(attributes, '"([^"]+)"') as transcript_id,
    COUNT(*) as exon_count
FROM 
    features
WHERE 
    featuretype = 'exon' AND seqid = 'BRCA1'
GROUP BY 
    transcript_id
ORDER BY 
    transcript_id;
```

### Explanation

1. **SELECT Statement**: We select the `transcript_id` and count of exons (`exon_count`). The `REGEXPextract` function is used to extract the transcript ID from the attributes field, which contains annotations like `transcript_id`.

2. **FROM Clause**: We specify the `features` table.

3. **WHERE Clause**: We filter for features where:
   - `featuretype = 'exon'`: Ensuring we only consider exons.
   - `seqid = 'BRCA1'`: Focusing on BRCA1.

4. **GROUP BY**: Group the results by `transcript_id` to aggregate exon counts per transcript isoform.

5. **COUNT(*)**: Counts the number of exons for each transcript.

6. **ORDER BY**: Sorts the transcripts alphabetically for readability.

This query efficiently groups exons by their associated transcript and provides the count, helping identify how many exons compose each BRCA1 isoform.